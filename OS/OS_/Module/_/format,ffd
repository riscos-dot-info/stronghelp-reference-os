Module format
#Parent OS_Module
#tab align right, align left
Offset	Contains
#Line
0	<Start code=>OS_Module_Start>		(usr mode)
4	<Initialise code=>OS_Module_Init>	(svc mode)
8	<Finalise code=>OS_Module_Final>	(svc mode)
12	<Service handler=>OS_Module_Service>	(svc or irq mode)
16	Title String
20	<Help String=>OS_Module_Help>
24	<Help/Command table=>OS_Module_ComTable>
28	SWI base number
32	<SWI handler=>OS_Module_SWIHandler>	(svc mode)
36	<SWI decode table=>OS_Module_SWITable>
40	<SWI decode code=>OS_Module_SWIDec>	(svc mode)
44	<MessageTrans=>MessageTrans_> file (3.60+)
48	Offset to <flags word=>OS_Module_Flags> (5.00+)
#tab

<All=>.arcane> entries except +28 are offsets from the start of the module. Entries of 0, or those outside the module will be ignored. This means that a 26 bit module with no SWIs could use the last six words for something else, though any modules requiring the flags word at +48 will need to pad to that point with zeros.

# Preach on
Try not to store data in the body of your module, allocate workspace and store the pointer in the private word. The OS lets module code be re-used (multiply instantiated) to allow several copies of the module to run at once, and several copies would be storing different data in the same locations in the module code. If this causes your module to crash because it has been multiply instantiated, it is *your* module's fault, not the OS' or the user's.
# Preach off
#Subpage arcane
Footnote for pedants
If the value for start code doesn't represent a valid non-zero offset, it is taken to be a literal ARM instruction (which hopefully is a branch to the right place). This can be used to branch to a stub which calls <OS_WriteEnv> before branching back into the module, which is useful during testing.