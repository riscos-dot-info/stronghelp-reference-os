OS_Memory (&68)
#Parent OS_
=>	R0 =	<reason code=>.reasons> (bits 0-7)
	 	and flags (bits 8-31) which are reason code specific

Peforms miscellaneous operations for memory management.

This call is only available from RISC OS 3.5 onwards.
#Subpage reasons
OS_Memory reason codes
R0	Action
#Line
0	<General page block operations=>.0>
1-5	Reserved for system use
6	<Read the size of the physical memory arrangement table=>.6>
7	<Read the physical memory arrangement table=>.7>
8	<Read the amount of a specified sort of memory available=>.8>
9	<Read controller presence and base address=>.9>
10-12	Reserved for system use
13	<Map in IO permanent=>.13>
14	<Map in IO temporary=>.14>
15	<Map out temporary IO=>.15>
16	<Memory areas=>.16>
#Subpage 0
OS_Memory 0
=>	R0 =	0 (reason code)
	 	and <flags=>.0flags>
	R1 =	pointer to page block (...)
	R2 =	number of entries in page block

This call converts between the different memory spaces used to specify addresses in a page block.
#Subpage 0flags
OS_Memory 0 flags
Bits	Meaning
#Line
0-7	0 (reason code)
8	set => physical page number provided
9	set => logical address provided
10	set => physical address provided
11	set => physical page number will be filled in when set (if bit 8 clear)
12	set => logical address will be filled in when set (if bit 9 clear)
13	set => physical address will be filled in when set (if bit 10 clear)
14-15	cacheability control:
	0,1 =>	no change
	2 =>	disable cacheing on all specified pages
	3 =>	enable cacheing on all specified pages
16-31	reserved, must be clear
#Subpage 6
OS_Memory 6
=>	R0 =	6 (reason code)
	 	all flags bits reserved
=>	R1 =	table size (in bytes)
	R2 =	page size (in bytes)

This call reads the size of the physical memory arrangement table, as returned by <OS_Memory 7=>.7>
#Subpage 7
OS_Memory 7
=>	R0 =	7 (reason code)
	 	all flags bits reserved
	R1 =	pointer to table to be filled in

This call reads the physical memory arrangement table, to get the size of this table, use <OS_Memory 6=>.6>
#Subpage 8
OS_Memory 8
=>	R0 =	8 (reason code)
	 	and <flags=>.8flags>
<=	R1 =	number of pages of specified type of memory
	R2 =	page size (in bytes)

This call reads the amount of a specified type of memory available in the computer.
#Subpage 8flags
OS_Memory 8 flags
Bits	Meaning
#Line
0-7	8 (reason code)
8-11	type of memory:
	1 =>	DRAM
	2 =>	VRAM
	3 =>	ROM
	4 =>	I/O (including all I/O, VIDC and EASI space)
	5 =>	Soft ROM (5.0+)
12-31	reserved, must be clear.
#Subpage 9
OS_Memory 9
=>	R0 =	9 (reason code)
	 	all flags bits reserved
	R1 =	<controller ID=>.9id>
<=	R1 =	controller base address, or 0 if not present

This call checks for the presence of a given controller and returns its base address if present.
#Subpage 9id
OS_Memory 9 controller ID
Bit	Meaning
#Line
0-7	controller sequence number
8-31	controller type:
	 	0 => EASI card ECTCR (for internal use only)
	 	1 => EASI space (for internal use only)
	 	2 => VIDC1
	 	3 => VIDC20
	 	4 => SSpace (5.0+)
	 	5 => Extension ROMs (5.0+)
#Subpage 13
OS_Memory 13 map in IO permanently (5.0+)
=>	R0 =	13 (reason code)
	 	and <flags=>.mapinflags>
	R1 =	physical address to map in
	R2 =	size to map in
<=	R3 =	logical address assigned

Permanently maps in a region of IO memory at run time.
#Subpage 14
OS_Memory 14 map in IO temporarily (5.0+)
=>	R0 =	14 (reason code)
	 	bit 8 = 1 to map bufferable space, 0 for unbufferable
	 	bits 9..31 = reserved, must be zero
	R1 =	physical address to map in
<=	R2 =	logical address assigned
	R3 =	reference key (required when releasing)

Temporarily maps in 1MByte of IO memory at run time.
If multiple 1MByte chunks are required keep calling this until done, when ready to release it is only necessary to release the {*}first{*} reference key - the kernel will then free the rest for you.
#Subpage 15
OS_Memory 15 release IO region (5.0+)
=>	R0 =	15 (reason code)
	 	all flags bits reserved
	R1 =	reference key (assigned when claimed)

Frees up a region of IO memory previously mapped in at run time.
#Subpage 16
OS_Memory 16 get area info (5.0+)
=>	R0 =	16 (reason code)
	 	bits 8-15 =
	 	  1 =	cursor/system/sound
	  	  2 =	IRQ stack
	  	  3 =	SVC stack
	  	  4 =	ABT stack
	  	  5 =	UND stack
	  	  6 =	Soft CAM
	  	  7 =	Level 1 page tables
	  	  8 =	Level 2 page tables
	  	  9 =	HAL workspace
	  	  10 =	Kernel buffers
	  	  11 =	HAL uncacheable workspace
	 	bits 16-31 reserved, must be 0
<=	R1 =	base of area
	R2 =	address space allocated for area
	R3 =	actual memory used by area

Returns details on the selected area, rounded to a whole number of pages, or zero if not present.
#Subpage mapinflags
Flags
Bit(s)	Meaning
#Line
8	1 to map bufferable space (0 is normal, non-bufferable)
9	1 to map cacheable space (0 is normal, non-cacheable)
16	1 to doubly map
17	1 if access privileges specified
24-27	access privileges (if bit 17 set)
others reserved, must be zero